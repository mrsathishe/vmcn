// ===================================
// MIXINS
// ===================================

@use "sass:map";
@use "variables" as *;

// Media query mixin
@mixin respond-to($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map.get($breakpoints, $breakpoint)}) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}.";
  }
}

// Media query for max-width
@mixin respond-below($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (max-width: #{map.get($breakpoints, $breakpoint) - 1px}) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}.";
  }
}

// Flexbox mixins
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  & {
    display: flex;
    align-items: center;
    justify-content: space-between;
  }
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

@mixin flex-column-center {
  @include flex-column;
  align-items: center;
  justify-content: center;
}

// Button mixins
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border: none;
  border-radius: border-radius(md);
  font-weight: font-weight(medium);
  text-decoration: none;
  cursor: pointer;
  transition: all transition(normal) ease;

  &:focus {
    outline: none;
    box-shadow: 0 0 0 0.125rem rgba(color(secondary), 0.25);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-primary {
  @include button-base;
  background-color: color(primary);
  color: color(white);

  &:hover:not(:disabled) {
    background-color: color(hover);
    transform: translateY(-0.0625rem);
  }

  &:active {
    transform: translateY(0);
  }
}

@mixin button-secondary {
  @include button-base;
  background-color: color(secondary);
  color: color(white);

  &:hover:not(:disabled) {
    background-color: color(focus);
    transform: translateY(-0.0625rem);
  }

  &:active {
    transform: translateY(0);
  }
}

// Card mixin
@mixin card {
  background-color: color(white);
  border-radius: border-radius(lg);
  box-shadow: shadow(base);
  padding: spacing(6);
  transition: all transition(normal) ease;

  &:hover {
    box-shadow: shadow(lg);
    transform: translateY(-0.125rem);
  }
}

// Container mixin
@mixin container($max-width: 75rem) {
  width: 100%;
  max-width: $max-width;
  margin: 0 auto;
  padding: 0 spacing(4);

  @include respond-to(md) {
    padding: 0 spacing(6);
  }

  @include respond-to(lg) {
    padding: 0 spacing(8);
  }
}

// Section mixin
@mixin section {
  padding: spacing(16) 0;

  @include respond-below(md) {
    padding: spacing(12) 0;
  }
}

// Text truncation
@mixin text-truncate {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Multi-line text truncation
@mixin text-truncate-multiline($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Visually hidden (for accessibility)
@mixin visually-hidden {
  position: absolute !important;
  width: 0.0625rem !important;
  height: 0.0625rem !important;
  padding: 0 !important;
  margin: -0.0625rem !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Focus styles
@mixin focus-ring {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 0.125rem rgba(color(secondary), 0.25);
  }
}

// Overlay mixin
@mixin overlay($color: rgba(color(black), 0.5)) {
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: $color;
    z-index: 1;
  }
}

// Aspect ratio mixin
@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;

  &::before {
    content: "";
    display: block;
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}
